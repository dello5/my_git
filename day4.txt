
ex 0

int		ft_iterative_factorial(int nb)
{
	int i;

	i = nb - 1;
	if (nb < 0 || nb > 12)
	{
		return (0);
	}
	else if (nb == 0)
	{
		return (1);
	}
		else while (i >= 1)
		{
			nb *= i;
			i--;
		}
	return (nb);
}

ex 1

int		ft_recursive_factorial(int nb)
{
	if (nb < 0 || nb > 12)
	{
		return (0);
	}
	else if (nb == 0)
	{
		return (1);
	}
		else return (nb * ft_recursive_factorial(nb - 1));
	return (nb);
}

ex 2

int		ft_iterative_power(int nb, int power)
{
	int		i;
	int		base;

	i = 1;
	base = nb;
	if (power < 0)
	{
		return (0);
	}
	else if (power == 0)
	{
		return (1);
	}
	else if (power > 0)
	{
		while (i < power)
		{
			nb = base * nb;
			i++;
		}
	}
	return (nb);
}


ex 3

int		ft_recursive_power(int nb, int power)
{
	if (power < 0)
	{
		return (0);
	}
	else if (power == 0)
	{
		return (1);
	}
	else if (power > 0)
	{
		return (nb * ft_recursive_power(nb, power - 1));
	}
	return (nb);
}

ex 4

int		ft_fibonacci(int index)
{
	if (index < 0)
	{
		return (-1);
	}
	if (index == 0)
	{
		return (0);
	}
	if (index == 1)
	{
		return (1);
	}
		else return (ft_fibonacci(index - 1) + ft_fibonacci(index - 2));
}


ex 5

int		ft_sqrt(int nb)
{
	int i;

	i = 1;
	if (nb == 0 || nb == 1)
		return (nb);
	if (nb < 0)
		return (0);
	while (i <= nb / 2)
	{
		if (i * i == nb)
			return (i);
		i++;
	}
	return (0);
}


ex 6

int		ft_is_prime(int nb)
{
	int		i;

	i = 3;
	if (nb <= 1)
		return (0);
	if (nb % 2 == 0 && nb > 2)
		return (0);
	while (i < (nb / 2))
	{
		if (nb % i == 0)
		{
			return (0);
		}
		i += 2;
	}
	return (1);
}
